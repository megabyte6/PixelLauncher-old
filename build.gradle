plugins {
    // Apply the java plugin for better toolchain detection support.
    id 'java'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // Apply javafxplugin for JavaFX support.
    id 'org.openjfx.javafxplugin' version '0.0.13'
    // Apply jlink for building the app.
    id 'org.beryx.jlink' version '2.26.0'
    // Apply lombok.
    id 'io.freefair.lombok' version '6.6.3'
}

version = appVersion
def osName = System.getProperty("os.name")

ext {
    // Links for downloading jdks.
    jdkLinks = [
        'linux-aarch64': 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.6%2B10/OpenJDK17U-jdk_aarch64_linux_hotspot_17.0.6_10.tar.gz',
        'linux-x64'    : 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.6%2B10/OpenJDK17U-jdk_x64_linux_hotspot_17.0.6_10.tar.gz',
        'macos-aarch64': 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.6%2B10/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.6_10.tar.gz',
        'macos-x64'    : 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.6%2B10/OpenJDK17U-jdk_x64_mac_hotspot_17.0.6_10.tar.gz',
        'win-x64'      : 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.6%2B10/OpenJDK17U-jdk_x64_windows_hotspot_17.0.6_10.zip'
    ]
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'eu.iamgio:animated:0.7.0'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'io.github.palexdev:materialfx:11.15.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    mainModule = 'org.pixellauncher'
    mainClass = 'org.pixellauncher.App'
}

javafx {
    version = javafxVersion
    modules = ['javafx.controls', 'javafx.fxml']
}

jlink {
    options = [
        '--strip-debug',
        '--compress', '2',
        '--no-header-files',
        '--no-man-pages'
    ]
    launcher {
        noConsole = true
    }
    imageZip = file("$buildDir/PixelLauncher.zip")

    if (jlinkTargetPlatform == 'all') {
        // Run all cases.
        jdkLinks.each { key, value ->
            targetPlatform(key) {
                jdkHome = jdkDownload(value)
                addExtraModulePath('jmods/19.0.2.1' + key.split('-').join('/'))
            }
        }
    } else {
        targetPlatform(jlinkTargetPlatform) {
            jdkHome = jdkDownload(jdkLinks[jlinkTargetPlatform])
            addExtraModulePath('jmods/19.0.2.1' + jlinkTargetPlatform.split('-').join('/'))
        }
    }

    jpackage {
        targetPlatformName = jpackageTargetPlatform
        imageName = 'Pixel Launcher'
        installerName = 'PixelLauncher'
        icon = 'src/main/resources/icon.png'
        vendor = 'Brayden Chan'

        if (jpackageOutputType != 'default') {
            installerOptions = ["--type $jpackageOutputType"]
        } else {
            installerOptions = []
        }

        if (osName.toLowerCase().contains("windows")) {
            installerOptions += [
                '--win-dir-chooser',
                '--win-menu',
                '--win-menu-group', 'Pixel Launcher',
                '--win-per-user-install',
                '--win-shortcut',
                '--win-shortcut-prompt',
                '--win-update-url', 'https://github.com/megabyte6/PixelLauncher/releases/latest'
            ]
        } else if (osName.toLowerCase().contains("linux")) {
            installerOptions += [
                '--linux-package-name', 'Pixel Launcher',
                '--linux-menu-group', 'Pixel Launcher',
                '--linux-shortcut'
            ]
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
